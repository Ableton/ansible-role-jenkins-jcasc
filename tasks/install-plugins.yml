---
- name: Copy plugins file
  ansible.builtin.template:
    src: "{{ jenkins_plugins_file }}"
    dest: "{{ jenkins_config_dir }}/plugins.yaml"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: "0644"
  diff: "{{ jenkins_show_plugins_yaml_changes }}"
  register: copy_plugins_yaml_file

# If the template file changed, then nuke the plugins directory before installing plugins.
# We want to make sure to avoid any potential problems with conflicting dependencies, and
# also to correctly handle the case when plugins are removed from the plugins.yaml file.
- name: Clean plugins directory
  ansible.builtin.file:
    path: "{{ jenkins_plugins_dir }}"
    state: absent
  when: copy_plugins_yaml_file is changed  # noqa no-handler

- name: Install plugins
  become: true
  become_user: "{{ jenkins_user }}"
  ansible.builtin.command: >
    java -jar
    {{ jenkins_pimt_path }}
    --plugin-download-directory {{ jenkins_plugins_dir }}
    --plugin-file {{ jenkins_config_dir }}/plugins.yaml
    --war {{ jenkins_war }}
    --verbose
    {{ jenkins_pimt_args }}
  environment:
    CACHE_DIR: "{{ jenkins_caches_dir }}"
  when: copy_plugins_yaml_file is changed  # noqa no-handler
  retries: "{{ jenkins_download_retries }}"
  delay: "{{ jenkins_download_delay }}"
  register: plugin_installation_result
  until: plugin_installation_result is succeeded

# This should be done in order to ensure that older versions of JCasC and its dependencies
# aren't installed to the controller.
- name: Clean plugin dependencies directory
  become: false
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ role_path }}/plugins/target"
    state: absent
  # To satisfy Molecule, which would complain about this task being non-idempotent.
  changed_when: false

- name: Fetch plugin dependencies with Gradle on Ansible control node
  become: false
  delegate_to: localhost
  ansible.builtin.command: "./gradlew getDeps"
  args:
    chdir: "{{ role_path }}/plugins"
  changed_when: false

- name: Find all plugins downloaded by Gradle on Ansible control node
  become: false
  delegate_to: localhost
  ansible.builtin.find:
    paths:
      - "{{ role_path }}/plugins/target"
    patterns:
      - "*.hpi"
      - "*.jpi"
  register: role_custom_plugins

- name: Collect JCasC plugins in jenkins_jcasc_plugins list
  ansible.builtin.set_fact:
    jenkins_jcasc_plugins: >
      {{ role_custom_plugins.files | map(attribute='path') | list }}

# We install custom plugins AFTER installing everything else with the plugin installation
# manager tool. This allows us to ensure that these plugins are not overridden by a
# different and possibly conflicting version.
- name: Install custom Jenkins plugins
  ansible.builtin.copy:
    src: "{{ plugin_file }}"
    dest: "{{ jenkins_plugins_dir }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: "0644"
  with_items: "{{ jenkins_jcasc_plugins + jenkins_custom_plugins }}"
  loop_control:
    loop_var: plugin_file
